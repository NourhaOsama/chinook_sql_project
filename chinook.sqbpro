<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="C:/Users/hp/Downloads/AMIT material/chinook.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="3"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="100"/><column_width id="3" width="3862"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><current_table name="4,6:maintracks"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="albums" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="61"/><column index="2" value="300"/><column index="3" value="59"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="employees" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="82"/><column index="2" value="71"/><column index="3" value="71"/><column index="4" value="124"/><column index="5" value="75"/><column index="6" value="129"/><column index="7" value="129"/><column index="8" value="178"/><column index="9" value="67"/><column index="10" value="44"/><column index="11" value="60"/><column index="12" value="80"/><column index="13" value="115"/><column index="14" value="115"/><column index="15" value="168"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="genres" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="59"/><column index="2" value="112"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="invoice_items" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="94"/><column index="2" value="68"/><column index="3" value="56"/><column index="4" value="65"/><column index="5" value="64"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="invoices" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="68"/><column index="2" value="83"/><column index="3" value="129"/><column index="4" value="264"/><column index="5" value="132"/><column index="6" value="80"/><column index="7" value="96"/><column index="8" value="116"/><column index="9" value="40"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="media_types" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="90"/><column index="2" value="164"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="playlists" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="67"/><column index="2" value="155"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="sqlite_sequence" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="84"/><column index="2" value="40"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="sqlite_stat1" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="84"/><column index="2" value="194"/><column index="3" value="71"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="tracks" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="56"/><column index="2" value="300"/><column index="3" value="61"/><column index="4" value="90"/><column index="5" value="59"/><column index="6" value="300"/><column index="7" value="84"/><column index="8" value="63"/><column index="9" value="65"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="SQL 1">--1---
-- get Title , tack_id ,track_name , tack_composer from tables(tracks - albums)
SELECT  albums.Title ,tracks.TrackId as tack_id , tracks.Name as track_name, tracks.Composer as tack_composer
from 
albums join tracks
on albums.AlbumId= tracks.AlbumId
----2-----------------
-- get Title, tack_id ,track_name,tack_composer ,playlist_id, playlist_name
-- by using diffrent tables (albums - tracks - playlists- playlist_track)

SELECT  albums.Title ,tracks.TrackId as tack_id , tracks.Name as track_name, tracks.Composer as tack_composer, playlists.PlaylistId as
playlist_id ,playlists.Name as playlist_name
from 
albums join tracks
on albums.AlbumId= tracks.AlbumId
JOIN playlist_track 
on tracks.TrackId = playlist_track.TrackId
join playlists
on playlists.PlaylistId= playlist_track.PlaylistId

---3---------------
-- get Title,AlbumId,tack_id,track_name,artist_name by using tables(albums - artists - tracks)
SELECT  albums.Title,  albums.AlbumId ,tracks.TrackId as tack_id , tracks.Name as track_name, artists.Name as artist_name
from albums 
join artists
on albums.ArtistId= artists.ArtistId
join tracks
on tracks.AlbumId =albums.AlbumId

-------------4----
-- get the number of tracks id using a special condition whene tracks_bytes is more than 4693941
SELECT count(tracks.TrackId) as number_larg_bytes
from tracks 
WHERE tracks.Bytes &gt; 4693941

----5---
-- get the averag number of the Milliseconds and Bytes from the tracks table
SELECT avg(tracks.Milliseconds) as Milliseconds_mean, avg(tracks.Bytes) as Bytes_mean
from tracks

-----6-----------
-- get the total info of table employee and count grouped by the city 
select *, count(*)
from employees
GROUP by employees.City
------7-------- 
-- get the albums_id ,title_name,track_name ,genres_name whene the media type name is
-- (Protected MPEG-4 video file) descending by albumid
---------------
SELECT albums.AlbumId as albums_id,albums.Title as title_name, tracks.Name as track_name , genres.Name as genres_name
from albums join tracks
on albums.AlbumId= tracks.AlbumId
join genres 
on genres.GenreId= tracks.GenreId
join media_types
on media_types.MediaTypeId= tracks.MediaTypeId
WHERE media_types.Name=&quot;Protected MPEG-4 video file&quot;
ORDER by albums.AlbumId DESC

------------8-------
--get quantity,total,BillingCity ,BillingState,UnitPrice whene the country is USA descending by the total

select invoice_items.Quantity as quantity , invoices.Total as total, invoices.BillingCity , invoices.BillingState
, invoice_items.UnitPrice as UnitPrice 
from invoices join invoice_items
on invoice_items.InvoiceId= invoices.InvoiceId
where invoices.BillingCountry= &quot;USA&quot;
order by invoices.Total DESC

----------9-----get the total averag 
SELECT avg(invoices.Total) as avg_total
from invoices
----------5.65194174757283-----
-- by using the last VALUE , will get BillingCountry,BillingCity,BillingAddress,InvoiceDate ,Total
--from the invoices table by a special condition 
select invoices.BillingCountry,invoices.BillingCity, invoices.BillingAddress,InvoiceDate ,invoices.Total,
CASE
	WHEN invoices.Total &gt; 5.65194174757283 THEN &quot;the total is larg&quot;
	WHEN invoices.Total = 5.65194174757283 THEN &quot;the total equal the avg&quot;
	ELSE &quot;the total is small&quot;
END as total_stat
from invoices

----11--------------
--get tge FirstName,FirstName,City, Country of the customer in case the city ins null return it by coubtry 
--else return it by city 
------
SELECT customers.FirstName,customers.FirstName, customers.City, customers.Country
FROM Customers
ORDER BY
(CASE
    WHEN City IS NULL THEN Country
    ELSE City
END);
	










</sql><current_tab id="0"/></tab_sql></sqlb_project>
